h1. tableless_model

Ruby on Rails model without database.

With all the power of ActiveRecord and validations.

The main utility is used in forms that do not need a database, but needs the validation of ActiveRecord, form_for and RESTful routes. For example contact form.

h2. Instalation

<pre>
<code>
./script/plugin install git://github.com/patrickespake/tableless_model.git
</code>
</pre>

h2. Generators

h3. tableless_model Generator

Stubs out a new tableless model. Pass the tableless model name, either CamelCased or under_scored, and an optional list of attribute pairs as arguments.

Attribute pairs are column_name:sql_type arguments specifying the tableless model's attributes.

You don't have to think up every attribute up front, but it helps to sketch out a few so you can start working with the tableless model immediately.

This generates a tableless model class in app/models, a unit test in test/unit, a test fixture in test/fixtures/singular_name.yml.

Examples:

<pre>
<code>
./script/generate tableless_model contact
</code>
</pre>

creates an Contact model, test, and fixture:
* Model:      app/models/contact.rb
* Test:       test/unit/contact_test.rb
* Fixtures:   test/fixtures/contacts.yml

<pre>
<code>
./script/generate tableless_model invite name:string body:text email:string
</code>
</pre>

creates a Invite tableless model with a string name, text body, and string email.

h3. tableless_scaffold Generator

Tableless scaffolds an entire resource, from model, controller and views, along with a full test suite. The resource is ready to use as a starting point for your RESTful, resource-oriented application.

Pass the name of the model (in singular form), either CamelCased or under_scored, as the first argument, and an optional list of attribute pairs.

Attribute pairs are column_name:sql_type arguments specifying the model's attributes.

You don't have to think up every attribute up front, but it helps to sketch out a few so you can start working with the resource immediately.

For example, 'tableless_scaffold contact name:string telephone:string firm:string email:string message:text'
gives you a model with those three attributes, a controller that handle the create, form to create your contacts, as well as a map.resources :contacts declaration in config/routes.rb.

If you want to remove all the generated files, run 'script/destroy scaffold ModelName'.

Examples:

<pre>
<code>
./script/generate tableless_scaffold invite
</code>
</pre>

<pre>
<code>
./script/generate tableless_scaffold contact name:string telephone:string firm:string email:string message:text
</code>
</pre>

h2. ActiveRecord validations working perfectly

<pre>
<code>
class Contact < TablelessModel
  column :name,      :string
  column :telephone, :string
  column :firm,      :string
  column :email,     :string
  column :message,   :text

  validates_presence_of :name, :email, :message
  validates_format_of   :email, :with => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i
  validates_length_of   :message, :minimum => 3
end
</code>
</pre>

h2. Full Example Using tableless_scaffold Generator

h3. Create tableless scaffold

<pre>
<code>
./script/generate tableless_scaffold contact name:string telephone:string firm:string email:string message:text
</code>
</pre>

h3. Run

<pre>
<code>
./script/server
</code>
</pre>

Open your browser in: http://localhost:3000/contacts/new

h2. Full Example Using tableless_model Generator

h3. Create tableless model

<pre>
<code>
./script/generate tableless_model contact name:string telephone:string firm:string email:string message:text
</code>
</pre>

h3. Add validations in the model

Open the file app/models/contact.rb and add the validations:

<pre>
<code>
class Contact < TablelessModel
  column :name, :string
  column :telephone, :string
  column :firm, :string
  column :email, :string
  column :message, :text

  # Validations
  validates_presence_of :name, :email, :message
  validates_format_of   :email, :with => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i
  validates_length_of   :message, :minimum => 3
end
</code>
</pre>

h3. Create the controller

<pre>
<code>
./script/generate controller contacts new create
</code>
</pre>

Add the code for the actions:

<pre>
<code>
class ContactController < ApplicationController
  def new
    @contact = Contact.new
  end

  def create
    @contact = Contact.new(params[:contact])

    if @contact.save # or @contact.valid?
      flash[:notice] = "Contact email sent successfully."

      # Send contact email
      #MyMailer.deliver_contact(@contact)

      redirect_to new_contact_path
    else
      render :action => "new"
    end
  end
end
</code>
</pre>

h3. Create the routes of contacts

Open the file config/routes.rb and add the line:

<pre>
<code>
ActionController::Routing::Routes.draw do |map|
  map.resources :contacts, :only => [:new, :create]
  ...
end
</code>
</pre>

h3. Create a contact form

Open the file app/views/contacts/new.html.erb and add the content:

<pre>
<code>
<% form_for(@contact) do |f| %>
  <%= f.error_messages %>

  <%= f.label :name %>
  <%= f.text_field :name %>

  <%= f.label :telephone %>
  <%= f.text_field :telephone %>

  <%= f.label :firm %>
  <%= f.text_field :firm %>

  <%= f.label :email %>
  <%= f.text_field :email %>

  <%= f.label :message %>
  <%= f.text_area :message %>

  <%= f.submit "Send" %>
<% end %>
</code>
</pre>

Delete the file app/views/contacts/create.html.erb.

h3. Run

<pre>
<code>
./script/server
</code>
</pre>

Open your browser in: "http://localhost:3000/contacts/new":http://localhost:3000/contacts/new

h2. Documentation

"http://lab.patrickespake.com/tableless_model":http://lab.patrickespake.com/tableless_model

Copyright (c) 2009 Patrick Espake, released under the MIT license

Site: "http://www.patrickespake.com":http://www.patrickespake.com
Blog: "http://blog.patrickespake.com":http://blog.patrickespake.com
Email: "patrickespake@gmail.com":mailto:patrickespake@gmail.com